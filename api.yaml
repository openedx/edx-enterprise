# This file is a "de-compacted" version of api-compact.yaml. The consuming tools are unable to process YAML anchors.
# This file was generated using http://www.yamllint.com/.

---
apigateway_responses:
  200:
    statusCode: "200"
  401:
    statusCode: "401"
  403:
    statusCode: "403"
  404:
    statusCode: "404"
  429:
    statusCode: "429"
  500:
    statusCode: "500"
  default:
    statusCode: "400"
apigateway_responses_with_mapping_template_catalogs:
  200:
    responseTemplates:
      application/json: |
          #set($inputRoot = $input.path('$')) #set($host = $stageVariables.gateway_host) #set($catalogId = $input.params('id'))
          #set($URLMatchRegex = "(^https?://)[^/]*[^?]*(.*$)") #set($updatedURL = "$1$host$context.resourcePath$2") #set($resourceIdMatch = "{id}")
          {
            "count": $inputRoot.count,
            "next": "$inputRoot.next.replaceAll($URLMatchRegex, $updatedURL).replace($resourceIdMatch, $catalogId)",
            "previous": "$inputRoot.previous.replaceAll($URLMatchRegex, $updatedURL).replace($resourceIdMatch, $catalogId)",
            "results": $inputRoot.results
          }
    statusCode: "200"
  401:
    statusCode: "401"
  403:
    statusCode: "403"
  404:
    statusCode: "404"
  429:
    statusCode: "429"
  500:
    statusCode: "500"
  default:
    statusCode: "400"
apigateway_responses_with_mapping_template_programs:
  200:
    responseTemplates:
      application/json: |
          #set($inputRoot = $input.path('$')) #set($host = $stageVariables.gateway_host) #set($programUuid = $input.params('uuid'))
          #set($URLMatchRegex = "(^https?://)[^/]*[^?]*(.*$)") #set($updatedURL = "$1$host$context.resourcePath$2") #set($resourceUuidMatch = "{uuid}")
          {
            "count": $inputRoot.count,
            "next": "$inputRoot.next.replaceAll($URLMatchRegex, $updatedURL).replace($resourceUuidMatch, $programUuid)",
            "previous": "$inputRoot.previous.replaceAll($URLMatchRegex, $updatedURL).replace($resourceUuidMatch, $programUuid)",
            "results": $inputRoot.results
          }
    statusCode: "200"
  401:
    statusCode: "401"
  403:
    statusCode: "403"
  404:
    statusCode: "404"
  429:
    statusCode: "429"
  500:
    statusCode: "500"
  default:
    statusCode: "400"
auth_header:
  in: header
  name: Authorization
  required: true
  type: string
endpoints:
  v1:
    enterpriseCatalogById:
      get:
        operationId: get_enterprise_catalog_by_id
        parameters:
          -
            in: header
            name: Authorization
            required: true
            type: string
          -
            in: path
            name: id
            required: true
            type: number
        produces:
          - application/json
          - application/csv
        responses:
          200:
            description: OK
          400:
            description: "Bad Request"
          401:
            description: Unauthorized
          403:
            description: Forbidden
          404:
            description: "Not Found"
          429:
            description: "Too Many Requests"
          500:
            description: "Internal Server Error"
        x-amazon-apigateway-integration:
          httpMethod: GET
          requestParameters:
            integration.request.header.Authorization: method.request.header.Authorization
            integration.request.path.id: method.request.path.id
          responses:
            200:
              statusCode: "200"
            401:
              statusCode: "401"
            403:
              statusCode: "403"
            404:
              statusCode: "404"
            429:
              statusCode: "429"
            500:
              statusCode: "500"
            default:
              statusCode: "400"
          type: http
          uri: "https://${stageVariables.enterprise_host}/enterprise/api/v1/catalogs/{id}/"
    enterpriseCatalogCourses:
      get:
        operationId: get_enterprise_catalog_courses
        parameters:
          -
            in: header
            name: Authorization
            required: true
            type: string
          -
            in: path
            name: id
            required: true
            type: number
          -
            in: query
            name: limit
            required: false
            type: number
          -
            in: query
            name: offset
            required: false
            type: number
          -
            in: query
            name: page
            required: false
            type: number
          -
            in: query
            name: page_size
            required: false
            type: number
        produces:
          - application/json
          - application/csv
        responses:
          200:
            description: OK
          400:
            description: "Bad Request"
          401:
            description: Unauthorized
          403:
            description: Forbidden
          404:
            description: "Not Found"
          429:
            description: "Too Many Requests"
          500:
            description: "Internal Server Error"
        x-amazon-apigateway-integration:
          httpMethod: GET
          requestParameters:
            integration.request.header.Authorization: method.request.header.Authorization
            integration.request.path.id: method.request.path.id
            integration.request.querystring.limit: method.request.querystring.limit
            integration.request.querystring.offset: method.request.querystring.offset
            integration.request.querystring.page: method.request.querystring.page
            integration.request.querystring.page_size: method.request.querystring.page_size
          responses:
            200:
              responseTemplates:
                application/json: |
                    #set($inputRoot = $input.path('$')) #set($host = $stageVariables.gateway_host) #set($catalogId = $input.params('id'))
                    #set($URLMatchRegex = "(^https?://)[^/]*[^?]*(.*$)") #set($updatedURL = "$1$host$context.resourcePath$2") #set($resourceIdMatch = "{id}")
                    {
                      "count": $inputRoot.count,
                      "next": "$inputRoot.next.replaceAll($URLMatchRegex, $updatedURL).replace($resourceIdMatch, $catalogId)",
                      "previous": "$inputRoot.previous.replaceAll($URLMatchRegex, $updatedURL).replace($resourceIdMatch, $catalogId)",
                      "results": $inputRoot.results
                    }
              statusCode: "200"
            401:
              statusCode: "401"
            403:
              statusCode: "403"
            404:
              statusCode: "404"
            429:
              statusCode: "429"
            500:
              statusCode: "500"
            default:
              statusCode: "400"
          type: http
          uri: "https://${stageVariables.enterprise_host}/enterprise/api/v1/catalogs/{id}/courses/"
    enterpriseCatalogs:
      get:
        operationId: get_enterprise_catalogs
        parameters:
          -
            in: header
            name: Authorization
            required: true
            type: string
          -
            in: query
            name: limit
            required: false
            type: number
          -
            in: query
            name: offset
            required: false
            type: number
          -
            in: query
            name: page
            required: false
            type: number
          -
            in: query
            name: page_size
            required: false
            type: number
        produces:
          - application/json
          - application/csv
        responses:
          200:
            description: OK
          400:
            description: "Bad Request"
          401:
            description: Unauthorized
          403:
            description: Forbidden
          404:
            description: "Not Found"
          429:
            description: "Too Many Requests"
          500:
            description: "Internal Server Error"
        x-amazon-apigateway-integration:
          httpMethod: GET
          requestParameters:
            integration.request.header.Authorization: method.request.header.Authorization
            integration.request.querystring.limit: method.request.querystring.limit
            integration.request.querystring.offset: method.request.querystring.offset
            integration.request.querystring.page: method.request.querystring.page
            integration.request.querystring.page_size: method.request.querystring.page_size
          responses:
            200:
              responseTemplates:
                application/json: |
                    #set($inputRoot = $input.path('$')) #set($host = $stageVariables.gateway_host) #set($catalogId = $input.params('id'))
                    #set($URLMatchRegex = "(^https?://)[^/]*[^?]*(.*$)") #set($updatedURL = "$1$host$context.resourcePath$2") #set($resourceIdMatch = "{id}")
                    {
                      "count": $inputRoot.count,
                      "next": "$inputRoot.next.replaceAll($URLMatchRegex, $updatedURL).replace($resourceIdMatch, $catalogId)",
                      "previous": "$inputRoot.previous.replaceAll($URLMatchRegex, $updatedURL).replace($resourceIdMatch, $catalogId)",
                      "results": $inputRoot.results
                    }
              statusCode: "200"
            401:
              statusCode: "401"
            403:
              statusCode: "403"
            404:
              statusCode: "404"
            429:
              statusCode: "429"
            500:
              statusCode: "500"
            default:
              statusCode: "400"
          type: http
          uri: "https://${stageVariables.enterprise_host}/enterprise/api/v1/catalogs/"
    enterpriseProgramByUuid:
      get:
        operationId: get_enterprise_program_by_uuid
        parameters:
          -
            in: header
            name: Authorization
            required: true
            type: string
          -
            in: path
            name: uuid
            required: true
            type: string
        produces:
          - application/json
          - application/csv
        responses:
          200:
            description: OK
          400:
            description: "Bad Request"
          401:
            description: Unauthorized
          403:
            description: Forbidden
          404:
            description: "Not Found"
          429:
            description: "Too Many Requests"
          500:
            description: "Internal Server Error"
        x-amazon-apigateway-integration:
          httpMethod: GET
          requestParameters:
            integration.request.header.Authorization: method.request.header.Authorization
            integration.request.path.id: method.request.path.uuid
          responses:
            200:
              statusCode: "200"
            401:
              statusCode: "401"
            403:
              statusCode: "403"
            404:
              statusCode: "404"
            429:
              statusCode: "429"
            500:
              statusCode: "500"
            default:
              statusCode: "400"
          type: http
          uri: "https://${stageVariables.enterprise_host}/enterprise/api/v1/programs/{uuid}/"
    enterprisePrograms:
      get:
        operationId: get_enterprise_programs
        parameters:
          -
            in: header
            name: Authorization
            required: true
            type: string
          -
            in: query
            name: limit
            required: false
            type: number
          -
            in: query
            name: offset
            required: false
            type: number
          -
            in: query
            name: page
            required: false
            type: number
          -
            in: query
            name: page_size
            required: false
            type: number
        produces:
          - application/json
          - application/csv
        responses:
          200:
            description: OK
          400:
            description: "Bad Request"
          401:
            description: Unauthorized
          403:
            description: Forbidden
          404:
            description: "Not Found"
          429:
            description: "Too Many Requests"
          500:
            description: "Internal Server Error"
        x-amazon-apigateway-integration:
          httpMethod: GET
          requestParameters:
            integration.request.header.Authorization: method.request.header.Authorization
            integration.request.querystring.limit: method.request.querystring.limit
            integration.request.querystring.offset: method.request.querystring.offset
            integration.request.querystring.page: method.request.querystring.page
            integration.request.querystring.page_size: method.request.querystring.page_size
          responses:
            200:
              responseTemplates:
                application/json: |
                    #set($inputRoot = $input.path('$')) #set($host = $stageVariables.gateway_host) #set($programUuid = $input.params('uuid'))
                    #set($URLMatchRegex = "(^https?://)[^/]*[^?]*(.*$)") #set($updatedURL = "$1$host$context.resourcePath$2") #set($resourceUuidMatch = "{uuid}")
                    {
                      "count": $inputRoot.count,
                      "next": "$inputRoot.next.replaceAll($URLMatchRegex, $updatedURL).replace($resourceUuidMatch, $programUuid)",
                      "previous": "$inputRoot.previous.replaceAll($URLMatchRegex, $updatedURL).replace($resourceUuidMatch, $programUuid)",
                      "results": $inputRoot.results
                    }
              statusCode: "200"
            401:
              statusCode: "401"
            403:
              statusCode: "403"
            404:
              statusCode: "404"
            429:
              statusCode: "429"
            500:
              statusCode: "500"
            default:
              statusCode: "400"
          type: http
          uri: "https://${stageVariables.enterprise_host}/enterprise/api/v1/programs/"
id_parameter:
  in: path
  name: id
  required: true
  type: number
limit_qs_parameter:
  in: query
  name: limit
  required: false
  type: number
offset_qs_parameter:
  in: query
  name: offset
  required: false
  type: number
page_qs_parameter:
  in: query
  name: page
  required: false
  type: number
page_size_qs_parameter:
  in: query
  name: page_size
  required: false
  type: number
produces:
  - application/json
  - application/csv
responses:
  200:
    description: OK
  400:
    description: "Bad Request"
  401:
    description: Unauthorized
  403:
    description: Forbidden
  404:
    description: "Not Found"
  429:
    description: "Too Many Requests"
  500:
    description: "Internal Server Error"
uuid_parameter:
  in: path
  name: uuid
  required: true
  type: string
x-amazon-apigateway-integration-catalogs:
  httpMethod: GET
  requestParameters:
    integration.request.header.Authorization: method.request.header.Authorization
    integration.request.querystring.limit: method.request.querystring.limit
    integration.request.querystring.offset: method.request.querystring.offset
    integration.request.querystring.page: method.request.querystring.page
    integration.request.querystring.page_size: method.request.querystring.page_size
  responses:
    200:
      responseTemplates:
        application/json: |
            #set($inputRoot = $input.path('$')) #set($host = $stageVariables.gateway_host) #set($catalogId = $input.params('id'))
            #set($URLMatchRegex = "(^https?://)[^/]*[^?]*(.*$)") #set($updatedURL = "$1$host$context.resourcePath$2") #set($resourceIdMatch = "{id}")
            {
              "count": $inputRoot.count,
              "next": "$inputRoot.next.replaceAll($URLMatchRegex, $updatedURL).replace($resourceIdMatch, $catalogId)",
              "previous": "$inputRoot.previous.replaceAll($URLMatchRegex, $updatedURL).replace($resourceIdMatch, $catalogId)",
              "results": $inputRoot.results
            }
      statusCode: "200"
    401:
      statusCode: "401"
    403:
      statusCode: "403"
    404:
      statusCode: "404"
    429:
      statusCode: "429"
    500:
      statusCode: "500"
    default:
      statusCode: "400"
  type: http
x-amazon-apigateway-integration-programs:
  httpMethod: GET
  requestParameters:
    integration.request.header.Authorization: method.request.header.Authorization
    integration.request.querystring.limit: method.request.querystring.limit
    integration.request.querystring.offset: method.request.querystring.offset
    integration.request.querystring.page: method.request.querystring.page
    integration.request.querystring.page_size: method.request.querystring.page_size
  responses:
    200:
      responseTemplates:
        application/json: |
            #set($inputRoot = $input.path('$')) #set($host = $stageVariables.gateway_host) #set($programUuid = $input.params('uuid'))
            #set($URLMatchRegex = "(^https?://)[^/]*[^?]*(.*$)") #set($updatedURL = "$1$host$context.resourcePath$2") #set($resourceUuidMatch = "{uuid}")
            {
              "count": $inputRoot.count,
              "next": "$inputRoot.next.replaceAll($URLMatchRegex, $updatedURL).replace($resourceUuidMatch, $programUuid)",
              "previous": "$inputRoot.previous.replaceAll($URLMatchRegex, $updatedURL).replace($resourceUuidMatch, $programUuid)",
              "results": $inputRoot.results
            }
      statusCode: "200"
    401:
      statusCode: "401"
    403:
      statusCode: "403"
    404:
      statusCode: "404"
    429:
      statusCode: "429"
    500:
      statusCode: "500"
    default:
      statusCode: "400"
  type: http
x-amazon-apigateway-integration-with-id:
  httpMethod: GET
  requestParameters:
    integration.request.header.Authorization: method.request.header.Authorization
    integration.request.path.id: method.request.path.id
  responses:
    200:
      statusCode: "200"
    401:
      statusCode: "401"
    403:
      statusCode: "403"
    404:
      statusCode: "404"
    429:
      statusCode: "429"
    500:
      statusCode: "500"
    default:
      statusCode: "400"
  type: http
x-amazon-apigateway-integration-with-id-and-querystring-parameters:
  httpMethod: GET
  requestParameters:
    integration.request.header.Authorization: method.request.header.Authorization
    integration.request.path.id: method.request.path.id
    integration.request.querystring.limit: method.request.querystring.limit
    integration.request.querystring.offset: method.request.querystring.offset
    integration.request.querystring.page: method.request.querystring.page
    integration.request.querystring.page_size: method.request.querystring.page_size
  responses:
    200:
      responseTemplates:
        application/json: |
            #set($inputRoot = $input.path('$')) #set($host = $stageVariables.gateway_host) #set($catalogId = $input.params('id'))
            #set($URLMatchRegex = "(^https?://)[^/]*[^?]*(.*$)") #set($updatedURL = "$1$host$context.resourcePath$2") #set($resourceIdMatch = "{id}")
            {
              "count": $inputRoot.count,
              "next": "$inputRoot.next.replaceAll($URLMatchRegex, $updatedURL).replace($resourceIdMatch, $catalogId)",
              "previous": "$inputRoot.previous.replaceAll($URLMatchRegex, $updatedURL).replace($resourceIdMatch, $catalogId)",
              "results": $inputRoot.results
            }
      statusCode: "200"
    401:
      statusCode: "401"
    403:
      statusCode: "403"
    404:
      statusCode: "404"
    429:
      statusCode: "429"
    500:
      statusCode: "500"
    default:
      statusCode: "400"
  type: http
x-amazon-apigateway-integration-with-uuid:
  httpMethod: GET
  requestParameters:
    integration.request.header.Authorization: method.request.header.Authorization
    integration.request.path.id: method.request.path.uuid
  responses:
    200:
      statusCode: "200"
    401:
      statusCode: "401"
    403:
      statusCode: "403"
    404:
      statusCode: "404"
    429:
      statusCode: "429"
    500:
      statusCode: "500"
    default:
      statusCode: "400"
  type: http
