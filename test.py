# Generated by Django 3.2.12 on 2022-03-29 19:35

import logging

from django.apps import apps
from django.core.exceptions import ObjectDoesNotExist
from django.db import migrations
from django.db.models import Max, Min

from integrated_channels.blackboard.models import (
    BlackboardEnterpriseCustomerConfiguration,
    BlackboardLearnerAssessmentDataTransmissionAudit,
)
from integrated_channels.canvas.models import (
    CanvasEnterpriseCustomerConfiguration,
    CanvasLearnerDataTransmissionAudit,
)
from integrated_channels.cornerstone.models import (
    CornerstoneEnterpriseCustomerConfiguration,
    CornerstoneLearnerDataTransmissionAudit,
)
from integrated_channels.degreed.models import (
    DegreedEnterpriseCustomerConfiguration,
    DegreedLearnerDataTransmissionAudit,
)
from integrated_channels.degreed2.models import (
    Degreed2EnterpriseCustomerConfiguration,
    Degreed2LearnerDataTransmissionAudit,
)
from integrated_channels.moodle.models import (
    MoodleEnterpriseCustomerConfiguration,
    MoodleLearnerDataTransmissionAudit,
)
from integrated_channels.sap_success_factors.models import (
    SAPSuccessFactorsEnterpriseCustomerConfiguration,
    SapSuccessFactorsLearnerDataTransmissionAudit,
)
from integrated_channels.integrated_channel.models import (
    GenericEnterpriseCustomerPluginConfiguration,
    GenericLearnerDataTransmissionAudit,
)
from integrated_channels.integrated_channel.models import (
    ContentMetadataItemTransmission
)

LOGGER = logging.getLogger(__name__)


## TODO
##
## - 'xapi.XAPILearnerDataTransmissionAudit' ?


def enterprise_course_enrollment_model():
    """
    Returns the ``EnterpriseCourseEnrollment`` class.
    """
    return apps.get_model('enterprise', 'EnterpriseCourseEnrollment')


def enterprise_customer_user_model():
    """
    Returns the ``EnterpriseCustomerUser`` class.
    """
    return apps.get_model('enterprise', 'EnterpriseCustomerUser')


def enterprise_customer_model():
    """
    Returns the ``EnterpriseCustomer`` class.
    """
    return apps.get_model('enterprise', 'EnterpriseCustomer')


def batch_by_pk(ModelClass, batch_size=100):
    """
    using limit/offset does a lot of table scanning to reach higher offsets
    this scanning can be slow on very large tables
    if you order by pk, you can use the pk as a pivot rather than offset
    this utilizes the index, which is faster than scanning to reach offset
    """
    qs = ModelClass.objects.order_by('pk')[:batch_size]
    while qs.exists():
        yield qs
        # qs.last() doesn't work here because we've already sliced
        # loop through so we eventually grab the last one
        for item in qs:
            start_pk = item.pk
        qs = ModelClass.objects.filter(pk__gt=start_pk).order_by('pk')[:batch_size]


def lookup_enterprise_customer(enrollment_id):
    EnterpriseCourseEnrollment = enterprise_course_enrollment_model()
    EnterpriseCustomerUser = enterprise_customer_user_model()
    EnterpriseCustomer = enterprise_customer_model()
    try:
        ece = EnterpriseCourseEnrollment.objects.get(pk=enrollment_id)
        ecu = EnterpriseCustomerUser.objects.get(pk=ece.enterprise_customer_user_id)
        ec = EnterpriseCustomer.objects.get(pk=ecu.enterprise_customer_id)
        return ec
    except ObjectDoesNotExist:
        return None


# channel code, config model, learner audit model
MODELS = {
    'BLACKBOARD': [BlackboardEnterpriseCustomerConfiguration, BlackboardLearnerAssessmentDataTransmissionAudit],
    'CANVAS': [CanvasEnterpriseCustomerConfiguration, CanvasLearnerDataTransmissionAudit],
    'CSOD': [CornerstoneEnterpriseCustomerConfiguration, CornerstoneLearnerDataTransmissionAudit],
    'DEGREED': [DegreedEnterpriseCustomerConfiguration, DegreedLearnerDataTransmissionAudit],
    'DEGREED2': [Degreed2EnterpriseCustomerConfiguration, Degreed2LearnerDataTransmissionAudit],
    'GENERIC': [GenericEnterpriseCustomerPluginConfiguration, GenericLearnerDataTransmissionAudit],
    'MOODLE': [MoodleEnterpriseCustomerConfiguration, MoodleLearnerDataTransmissionAudit],
    'SAP': [SAPSuccessFactorsEnterpriseCustomerConfiguration, SapSuccessFactorsLearnerDataTransmissionAudit],
}


def backfill_join_keys(apps, schema_editor):
    try:
        for models_pair in MODELS.values():
            ConfigModel, LearnerAuditModel = models_pair
            LOGGER.info(f'{LearnerAuditModel.__name__}')
            for audit_record_batch in batch_by_pk(LearnerAuditModel):
                for audit_record in audit_record_batch:
                    LOGGER.info(f'{LearnerAuditModel.__name__} <{audit_record.pk}>')
                    enterprise_customer = lookup_enterprise_customer(audit_record.enterprise_course_enrollment_id)
                    if enterprise_customer is None:
                        continue
                    config = ConfigModel.objects.filter(enterprise_customer=enterprise_customer).first()
                    if config is None:
                        continue
                    LOGGER.info(f'{LearnerAuditModel.__name__} <{audit_record.pk}> '
                                f'enterprise_customer_uuid={enterprise_customer.uuid}, '
                                f'plugin_configuration_id={config.id}')
        for audit_record_batch in batch_by_pk(ContentMetadataItemTransmission):
            for audit_record in audit_record_batch:
                LOGGER.info(f'ContentMetadataItemTransmission <{audit_record.pk}>')
                # if we cant lookup by code, skip
                channel_models = MODELS[audit_record.integrated_channel_code]
                if channel_models is None:
                    continue
                ConfigModel = channel_models[0]
                if audit_record.enterprise_customer is None:
                    continue
                config = ConfigModel.objects.filter(enterprise_customer=audit_record.enterprise_customer).first()
                LOGGER.info(f'ContentMetadataItemTransmission <{audit_record.pk}> '
                            f'plugin_configuration_id={config.id}')            
    except:
        LOGGER.exception()

backfill_join_keys(None, None)
# class Migration(migrations.Migration):

#     dependencies = [
#         ('integrated_channel', '0011_contentmetadataitemtransmission_plugin_configuration_id'),
#     ]

#     operations = [
#         migrations.RunPython(
#             code=backfill_join_keys,
#             reverse_code=migrations.RunPython.noop,
#         ),
#     ]
